'use client';
import { auth, db } from '@/lib/firebaseConfig';
import {
  collection,
  deleteDoc,
  doc,
  getDoc,
  getDocs,
  setDoc,
} from 'firebase/firestore';
import {
  createUserWithEmailAndPassword,
  deleteUser,
  EmailAuthProvider,
  reauthenticateWithCredential,
  signInWithEmailAndPassword,
  updateEmail,
  updatePassword,
  updateProfile,
} from 'firebase/auth';

export const register = async (
  name: string,
  email: string,
  password: string
): Promise<void> => {
  try {
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      email,
      password
    );
    const user = userCredential.user;
    await updateProfile(user, { displayName: name });
    const userRef = doc(db, 'users', user.uid);
    await setDoc(userRef, {
      name,
    });
  } catch (error: any) {
    if (error.code === 'auth/email-already-in-use') {
      throw new Error(
        'üîç A user with this email already exists. Please use a different email.'
      );
    } else {
      console.error('Registration error:', error);
      throw new Error('ü¶® Registration failed. Please try again.');
    }
  }
};

export const login = async (email: string, password: string): Promise<void> => {
  try {
    if (!email || !password) {
      throw new Error('Email and password cannot be empty.');
    }

    await signInWithEmailAndPassword(auth, email, password);
  } catch (error: any) {
    if (error.code === 'auth/user-not-found') {
      throw new Error(
        'üîç No user found with this email. Please check and try again.'
      );
    } else if (error.code === 'auth/wrong-password') {
      throw new Error('üêç Incorrect password. Please try again.');
    } else if (error.code === 'auth/invalid-email') {
      throw new Error(
        'ü¶ß Invalid email format. Please check your email and try again.'
      );
    } else {
      throw new Error('ü¶® Login failed. Please try again.');
    }
  }
};

export const saveMoodData = async (
  getMood: () => string,
  selectedFactors: string[],
  hoursOfSleep: number | string | null,
  weather: string,
  currentDate: string
): Promise<void> => {
  const user = auth.currentUser;

  if (!user) {
    console.error('User is not authenticated');
    return;
  }

  const moodData = {
    mood: getMood(),
    factors: selectedFactors,
    sleep: hoursOfSleep,
    weather,
  };

  const userDocRef = doc(db, `users/${user.uid}/mood/${currentDate}`);

  try {
    await setDoc(userDocRef, moodData);
  } catch (error) {
    console.error('Error saving mood data:', error);
  }
};

export const fetchMoodData = async (currentDate: string): Promise<any> => {
  const user = auth.currentUser;

  if (!user) {
    console.error('User is not authenticated');
    return null;
  }
  const userDocRef = doc(db, `users/${user.uid}/mood/${currentDate}`);
  try {
    const docSnap = await getDoc(userDocRef);
    if (docSnap.exists()) {
      return docSnap.data();
    } else {
      return null;
    }
  } catch (error) {
    console.error('Error fetching mood data:', error);
    return null;
  }
};

export const fetchAllMoodData = async (): Promise<
  { date: string; data: any }[]
> => {
  const user = auth.currentUser;

  if (!user) {
    console.error('User is not authenticated');
    return [];
  }

  const userMoodCollectionRef = collection(db, `users/${user.uid}/mood`);
  try {
    const querySnapshot = await getDocs(userMoodCollectionRef);
    if (!querySnapshot.empty) {
      const moodData = querySnapshot.docs.map((doc) => ({
        date: doc.id, // Use the document ID as the date
        data: doc.data(),
      }));
      return moodData;
    } else {
      return [];
    }
  } catch (error) {
    console.error('Error fetching all mood data:', error);
    return [];
  }
};

export const deleteAllMoodData = async (): Promise<void> => {
  const user = auth.currentUser;

  if (!user) {
    console.error('User is not authenticated');
    return;
  }

  const moodCollectionRef = collection(db, `users/${user.uid}/mood`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const moodDocsSnapshot = await getDocs(moodCollectionRef);

    // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const deletePromises = moodDocsSnapshot.docs.map((docSnapshot) =>
      deleteDoc(docSnapshot.ref)
    );

    await Promise.all(deletePromises);
  } catch (error) {
    console.error('Error deleting mood data:', error);
  }
};

export const deleteAccount = async (email: string, password: string) => {
  const user = auth.currentUser;

  if (!user) {
    console.error('User is not authenticated');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const credential = EmailAuthProvider.credential(email, password);
    // –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    await reauthenticateWithCredential(user, credential);
    await deleteAllMoodData();
    const userRef = doc(db, 'users', user.uid);

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteDoc(userRef);

    // –£–¥–∞–ª–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await deleteUser(user);

    // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    // –õ–æ–≥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    console.error('Error deleting account:', error);
    throw new Error('Failed to delete account. Please try again.'); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
  }
};

export const getUserDocument = async () => {
  try {
    const user = auth.currentUser;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!user) {
      throw new Error('User is not authenticated');
    }

    const userDocRef = doc(db, 'users', user.uid);
    const userDoc = await getDoc(userDocRef);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if (!userDoc.exists()) {
      throw new Error('User document does not exist');
    }

    return userDoc.data(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  } catch (error) {
    console.error('Error fetching user document:', error);
    throw error;
  }
};

export const updateUserName = async (name: string) => {
  try {
    const user = auth.currentUser;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!user) {
      throw new Error('User is not authenticated');
    }

    const userDocRef = doc(db, 'users', user.uid);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è setDoc —Å { merge: true }
    await setDoc(userDocRef, { name }, { merge: true });
  } catch (error) {
    console.error('Error updating user name:', error);
    throw error;
  }
};

export const updateUserEmail = async (
  newEmail: string,
  email: string,
  currentPassword: string
) => {
  try {
    const user = auth.currentUser;
    if (!user || !user.email) {
      throw new Error('No authenticated user found.');
    }

    // –†–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const credential = EmailAuthProvider.credential(email, currentPassword);
    await reauthenticateWithCredential(user, credential);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–≤—ã–π email
    await updateEmail(user, newEmail); // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç email
  } catch (error) {
    console.error('Error updating email:', error);
    throw error;
  }
};

export const updateUserPassword = async (
  newPassword: string,
  email: string,
  currentPassword: string
) => {
  try {
    const user = auth.currentUser;
    if (!user || !user.email) {
      throw new Error('No authenticated user found.');
    }

    // –†–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const credential = EmailAuthProvider.credential(email, currentPassword);
    await reauthenticateWithCredential(user, credential);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–≤—ã–π email
    await updatePassword(user, newPassword); // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç email
  } catch (error) {
    console.error('Error updating email:', error);
    throw error;
  }
};
